# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-20.04
    steps:
      # Pull code
      - name: Pull code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Create release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: 'The version is ready. You can see the changed log: https://github.com/qsaker/QtSwissArmyKnife/blob/master/resources/files/History.txt'
          draft: false
          prerelease: false
    

  build-for-windows:
    needs: [create-release]
    name: Build for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        qt_arch: [win32_msvc2019, win64_msvc2019_64]
        include:
          - qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019
            target_arch: x86
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            target_arch: x86_64
    steps:
      # Cache Qt
      - name: cacheQt
        id: WindowsCacheQt
        uses: actions/cache@v1
        with:
          path: ../Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
          key: ${{ runner.os }}-Qt/${{matrix.qt_ver}}/${{matrix.qt_arch}}
      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: ${{steps.WindowsCacheQt.outputs.cache-hit }}
          modules: qtcharts
      # Pull code and checkout.
      - name: Pull code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Build the project
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          qmake
          nmake
          dir
      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
          
      - name: Rename directory
        id: rename_operation
        env:
          zip_derectory: ${{ env.RELEASE_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.target_arch }}
        run: |
          mkdir ${{ env.zip_derectory }}
          xcopy /e release ${{ env.zip_derectory }}
          
      - name: To zip
        env:
          zip_derectory: ${{ env.RELEASE_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.target_arch }}
        run: |
          7z.exe a ${{ env.zip_derectory }}.zip ${{ env.zip_derectory }}/*
          dir
        
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          zip_derectory: ${{ env.RELEASE_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.target_arch }}
        with:
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ${{ env.zip_derectory }}.zip
          asset_name: ${{ env.zip_derectory }}.zip
          asset_content_type: application/zip
